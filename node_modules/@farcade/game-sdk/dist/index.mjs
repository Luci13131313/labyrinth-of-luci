// src/index.ts
var FarcadeSDK = class {
  constructor() {
    this.target = null;
    this.eventListeners = /* @__PURE__ */ new Map();
    this.singlePlayer = {
      actions: {
        ready: () => {
          this.sendMessage("ready", void 0);
        },
        gameOver: ({ score }) => {
          this.sendMessage("game_over", { score });
        },
        hapticFeedback: () => {
          this.sendMessage("haptic_feedback", void 0);
        },
        reportError: (errorData) => {
          this.sendMessage("error", errorData);
        }
      }
    };
    this.multiplayer = {
      actions: {
        ...this.singlePlayer.actions,
        gameOver: ({ scores }) => {
          this.sendMessage("multiplayer_game_over", { scores });
        },
        updateGameState: ({ data, alertUserIds }) => {
          this.sendMessage("update_game_state", { data, alertUserIds });
        },
        refuteGameState: (gameStateId) => {
          this.sendMessage("refute_game_state", { gameStateId });
        }
      }
    };
    this.handleMessage = (event) => {
      if (event.data?.type !== "game_event")
        return;
      this.emit(event.data.event.type, event.data.event.data);
    };
    this.sendMessage = (type, data) => {
      if (!this.isClient || !this.target)
        return;
      const gameEvent = { type: "game_event", event: { type, data } };
      this.target.postMessage(gameEvent, "*");
    };
    this.handleGlobalError = (event) => {
      this.sendMessage("error", {
        message: event.message || "Unknown error",
        source: event.filename,
        lineno: event.lineno,
        colno: event.colno,
        error: event.error
      });
    };
    this.handleUnhandledRejection = (event) => {
      const error = event.reason instanceof Error ? event.reason : new Error(String(event.reason));
      this.sendMessage("error", {
        message: error.message,
        error
      });
    };
    this.isClient = typeof window !== "undefined";
    this.target = this.isClient ? window.parent : null;
    if (this.isClient) {
      window.addEventListener("message", this.handleMessage);
      window.addEventListener("error", this.handleGlobalError);
      window.addEventListener("unhandledrejection", this.handleUnhandledRejection);
    }
  }
  on(eventType, callback) {
    if (!this.eventListeners.has(eventType)) {
      this.eventListeners.set(eventType, /* @__PURE__ */ new Set());
    }
    this.eventListeners.get(eventType)?.add(callback);
  }
  off(eventType, callback) {
    this.eventListeners.get(eventType)?.delete(callback);
  }
  setTarget(target) {
    this.target = target;
  }
  emit(eventType, data) {
    for (const callback of this.eventListeners.get(eventType) || []) {
      callback(data);
    }
  }
};
var sdk = new FarcadeSDK();
window.FarcadeSDK = sdk;
export {
  FarcadeSDK,
  sdk
};
//# sourceMappingURL=index.mjs.map
