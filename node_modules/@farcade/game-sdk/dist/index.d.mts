type ReadyEvent = {
    type: 'ready';
    data: undefined;
};
type PlayAgainEvent = {
    type: 'play_again';
    data: undefined;
};
type SinglePlayerGameOverEvent = {
    type: 'game_over';
    data: {
        score: number;
    };
};
type HapticFeedbackEvent = {
    type: 'haptic_feedback';
    data: undefined;
};
type ToggleMuteEvent = {
    type: 'toggle_mute';
    data: {
        isMuted: boolean;
    };
};
type GameEvent = PlayAgainEvent | SinglePlayerGameOverEvent | ReadyEvent | HapticFeedbackEvent | ToggleMuteEvent;
type GameEventMessage<T extends GameEvent['type']> = {
    type: 'game_event';
    event: Extract<GameEvent, {
        type: T;
    }>;
};
/**
 * Messages from the game host to the game client
 */
type IncomingGameEvent = GameEventMessage<'play_again' | 'toggle_mute'>;
type EventCallback = (data: unknown) => void;
declare class FarcadeSDK {
    private isClient;
    private target;
    private eventListeners;
    constructor();
    on(eventType: IncomingGameEvent['type'], callback: EventCallback): void;
    off(eventType: IncomingGameEvent['type'], callback: EventCallback): void;
    private emit;
    setTarget(target: Window): void;
    private handleMessage;
    singePlayer: {
        actions: {
            ready: () => void;
            gameOver: ({ score }: {
                score: number;
            }) => void;
            hapticFeedback: () => void;
        };
    };
    private sendMessage;
    destroy(): void;
}
declare const sdk: FarcadeSDK;

export { FarcadeSDK, type GameEvent, type GameEventMessage, type HapticFeedbackEvent, type IncomingGameEvent, type PlayAgainEvent, type ReadyEvent, type SinglePlayerGameOverEvent, type ToggleMuteEvent, sdk };
