declare global {
    interface Window {
        FarcadeSDK: typeof sdk;
    }
}
type ReadyEvent = {
    type: 'ready';
    data: undefined;
};
type PlayAgainEvent = {
    type: 'play_again';
    data: undefined;
};
type SinglePlayerGameOverEvent = {
    type: 'game_over';
    data: {
        score: number;
    };
};
type MultiplayerGameOverEvent = {
    type: 'multiplayer_game_over';
    data: {
        scores: {
            playerId: string;
            score: number;
        }[];
    };
};
type HapticFeedbackEvent = {
    type: 'haptic_feedback';
    data: undefined;
};
type ToggleMuteEvent = {
    type: 'toggle_mute';
    data: {
        isMuted: boolean;
    };
};
type GameErrorEvent = {
    type: 'error';
    data: {
        message: string;
        source?: string;
        lineno?: number;
        colno?: number;
        error?: Error;
    };
};
type GameInfoEvent = {
    type: 'game_info';
    data: {
        players: {
            id: string;
            name: string;
            imageUrl?: string;
        }[];
        meId: string;
    };
};
type UpdateGameStateEvent = {
    type: 'update_game_state';
    data: {
        data: Record<string, unknown>;
        alertUserIds?: string[];
    };
};
type GameStateUpdatedEvent = {
    type: 'game_state_updated';
    data: {
        id: string;
        data: unknown;
    } | null;
};
type RefuteGameStateEvent = {
    type: 'refute_game_state';
    data: {
        gameStateId: string;
    };
};
type GameEvent = PlayAgainEvent | SinglePlayerGameOverEvent | ReadyEvent | HapticFeedbackEvent | ToggleMuteEvent | GameErrorEvent | UpdateGameStateEvent | RefuteGameStateEvent | GameInfoEvent | GameStateUpdatedEvent | MultiplayerGameOverEvent;
type GameEventMessage<T extends GameEvent['type']> = {
    type: 'game_event';
    event: Extract<GameEvent, {
        type: T;
    }>;
};
/**
 * Messages from the game host to the game client
 */
type IncomingGameEvent = GameEventMessage<'play_again' | 'toggle_mute' | 'game_info' | 'game_state_updated'>;
type OutgoingGameEvent = GameEventMessage<'game_over' | 'ready' | 'haptic_feedback' | 'error' | 'update_game_state' | 'refute_game_state' | 'multiplayer_game_over'>;
type EventCallback = (data: unknown) => void;
declare class FarcadeSDK {
    private isClient;
    private target;
    private eventListeners;
    constructor();
    on(eventType: IncomingGameEvent['event']['type'], callback: EventCallback): void;
    off(eventType: IncomingGameEvent['event']['type'], callback: EventCallback): void;
    setTarget(target: Window): void;
    singlePlayer: {
        actions: {
            ready: () => void;
            gameOver: ({ score }: SinglePlayerGameOverEvent["data"]) => void;
            hapticFeedback: () => void;
            reportError: (errorData: GameErrorEvent["data"]) => void;
        };
    };
    multiplayer: {
        actions: {
            gameOver: ({ scores }: MultiplayerGameOverEvent["data"]) => void;
            updateGameState: ({ data, alertUserIds }: UpdateGameStateEvent["data"]) => void;
            refuteGameState: (gameStateId: string) => void;
            ready: () => void;
            hapticFeedback: () => void;
            reportError: (errorData: GameErrorEvent["data"]) => void;
        };
    };
    private emit;
    private handleMessage;
    private sendMessage;
    private handleGlobalError;
    private handleUnhandledRejection;
}
declare const sdk: FarcadeSDK;

export { FarcadeSDK, type GameErrorEvent, type GameEvent, type GameEventMessage, type GameInfoEvent, type GameStateUpdatedEvent, type HapticFeedbackEvent, type IncomingGameEvent, type MultiplayerGameOverEvent, type OutgoingGameEvent, type PlayAgainEvent, type ReadyEvent, type RefuteGameStateEvent, type SinglePlayerGameOverEvent, type ToggleMuteEvent, type UpdateGameStateEvent, sdk };
